// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password          Password?
  image             UserImage?
  platformStatus    PlatformStatus @relation(fields: [platformStatusKey], references: [key])
  platformStatusKey String

  notes         Note[]
  roles         Role[]
  sessions      Session[]
  userCompanies UserCompany[]
  connections   Connection[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  permissions   Permission[]
  userCompanies UserCompany[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model PlatformStatus {
  id    Int     @id @default(autoincrement())
  key   String  @unique
  label String?
  color String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  companies Company[]
  users     User[]
}

// * Account specific models
// * This is for a simple personal finance app

model TransactionStatus {
  id    Int     @id @default(autoincrement())
  key   String  @unique
  label String?
  color String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // ! Maybe remove transactions from here? I would hardly ever use them to query
  transactions  Transaction[]
  saleInvoices  SaleInvoice[]
  purchaseBills PurchaseBill[]
}

// Company model represents a business entity or organization that the accounting system will handle. 
model Company {
  id   String @id @default(cuid())
  name String // Name of the company or business entity.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  platformStatus    PlatformStatus @relation(fields: [platformStatusKey], references: [key])
  platformStatusKey String

  invoiceCount Int @default(0) // Count of invoices generated by the company.

  users         UserCompany[] // Users associated with the company.
  accounts      Account[] // Financial accounts belonging to the company.
  transactions  Transaction[] // Financial transactions recorded for the company.
  saleInvoices  SaleInvoice[] // Invoices generated by the company.
  saleItems     SaleInvoiceItem[] // Bills received by the company.
  purchaseBills PurchaseBill[]
}

// UserCompany is a join table that allows users to be associated with multiple companies.
// It serves as a many-to-many relationship between User and Company models.
model UserCompany {
  id      String  @id @default(cuid())
  isOwner Boolean @default(false)

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String

  roles Role[]

  transactions  Transaction[]
  saleInvoices  SaleInvoice[]
  purchaseBills PurchaseBill[]
  accounts      Account[]

  @@unique([userId, companyId])
}

// model represents financial ledgers which are used to record transactions
// and keep track of the financial status of various aspects of the company such as assets, liabilities, revenue, etc.
model Account {
  id          String  @id @default(cuid())
  name        String // Name of the financial ledger/account.
  uniqueId    String?
  email       String?
  balance     Float? // Current balance of the account.
  // type    String // Type of the account, e.g., revenue, expense.
  phone       String?
  country     String?
  city        String?
  state       String?
  zip         String?
  address     String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   String
  createdBy   UserCompany @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById String

  transactions Transaction[] // Transactions associated with this account.
  PurchaseBill PurchaseBill[] // Bills associated with this account.
  SaleInvoice  SaleInvoice[] // Invoices associated with this account.
}

// Transaction model records all the financial activities which affect accounts, defined by a change in balance.
model Transaction {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  description String // Describes the purpose of the transaction.
  amount      Float // The monetary value of the transaction.
  type        String? // Type can include 'sale', 'purchase', etc.
  category    String // Categorizes the transaction for accounting purposes.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company              Company           @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId            String
  account              Account           @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId            String
  transactionStatus    TransactionStatus @relation(fields: [transactionStatusKey], references: [key])
  transactionStatusKey String
  issuedBy             UserCompany?      @relation(fields: [issuedById], references: [id])
  issuedById           String?
}

// Invoice model represents bills to be sent to clients or received from suppliers,
// which can include one or more payable items, and their total has an impact on the company's finances.
// ! Remember to not delete any invoice ever for accounting purposes. Change the status to void or something.
model SaleInvoice {
  id            String   @id @default(cuid())
  invoiceNumber Int
  dateIssued    DateTime @default(now())
  dueDate       DateTime // The date by which the invoice should be paid.
  totalAmount   Float // Total monetary value to be paid / received for the invoice.
  description   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company              Company           @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId            String
  issuedTo             Account           @relation(fields: [issuedToId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  issuedToId           String
  transactionStatus    TransactionStatus @relation(fields: [transactionStatusKey], references: [key])
  transactionStatusKey String
  issuedBy             UserCompany?      @relation(fields: [issuedById], references: [id])
  issuedById           String?

  items SaleInvoiceItem[] // Line items detailing individual charges on the invoice.

  @@unique([companyId, invoiceNumber])
}

// SaleInvoiceItem model holds the details of each item or service listed in an invoice.
// Each item has a price and quantity which contribute to the invoice's total.
model SaleInvoiceItem {
  id          Int      @id @default(autoincrement())
  description String? // Details of what the item or service is.
  quantity    Int // Quantity of the item or service provided.
  price       Float // Price per unit of the item or service.
  total       Float    @default(0) // Total price for the line item.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String
  invoice   SaleInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoiceId String
}

// PurchaseBill model for purchase transactions from vendors
model PurchaseBill {
  id          String   @id @default(cuid())
  billNumber  String   @unique
  dateIssued  DateTime @default(now())
  dueDate     DateTime // Due date for payment.
  totalAmount Float // Total amount of the bill.
  vendor      String? // Vendor identifier or name.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company         Company      @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId       String
  paidToAccount   Account      @relation(fields: [paidToAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Account to which the bill is issued.
  paidToAccountId String
  createdBy       UserCompany? @relation(fields: [createdById], references: [id])
  createdById     String?

  // Optional: Relate to a user who manages the bill
  transactionStatus    TransactionStatus @relation(fields: [transactionStatusKey], references: [key])
  transactionStatusKey String

  purchaseBillItems PurchaseBillItem[] // Individual items on the bill.

  @@unique([companyId, billNumber])
}

// PurchaseBillItem model for line items on a purchase bill
model PurchaseBillItem {
  id             Int          @id @default(autoincrement())
  purchaseBill   PurchaseBill @relation(fields: [purchaseBillId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseBillId String
  description    String? // Description of the item or service.
  quantity       Int // Quantity of the item.
  price          Float // Unit price of the item.
  total          Float // Line item total (quantity * price).
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
